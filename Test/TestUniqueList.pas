unit TestUniqueList;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, uUniqueList, System.Generics.Collections, System.SysUtils;

type
  // Test methods for class TUniqueList

  TestTUniqueList = class(TTestCase)
  strict private
    FUniqueList: TUniqueList<string>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdd;
    procedure TestInsert;
    procedure TestRemove;
    procedure TestDelete;
    procedure TestSwap;
    procedure TestSwap1;
    procedure TestClear;
    procedure TestMove;
    procedure TestContains;
    procedure TestIndexOf;
    procedure TestCount;
  end;

implementation

procedure TestTUniqueList.SetUp;
begin
  FUniqueList := TUniqueList<string>.Create;
end;

procedure TestTUniqueList.TearDown;
begin
  FUniqueList.Free;
  FUniqueList := nil;
end;

procedure TestTUniqueList.TestAdd;
var
  i: Integer;
begin
  for i := 0 to 4 do
    FUniqueList.Add('Item' + IntToStr(I));

  CheckEquals(FUniqueList.Count, 5);
  for i := 0 to 4 do
    CheckEquals(FUniqueList[i], 'Item' + IntToStr(I));
end;

procedure TestTUniqueList.TestInsert;
var
  i: Integer;
begin
  FUniqueList.Insert(0, 'Item1');
  FUniqueList.Insert(0, 'Item0');
  FUniqueList.Insert(2, 'Item3');
  FUniqueList.Insert(3, 'Item4');
  FUniqueList.Insert(2, 'Item2');

  CheckEquals(FUniqueList.Count, 5);
  for i := 0 to 4 do
    CheckEquals(FUniqueList[i], 'Item' + IntToStr(I));
end;

procedure TestTUniqueList.TestRemove;
var
  i: Integer;
begin
  for i := 0 to 4 do
    FUniqueList.Add('Item' + IntToStr(I));

  FUniqueList.Remove('Item3');

  CheckEquals(FUniqueList.Count, 4);
  CheckEquals(FUniqueList.Contains('Item3'), False);

  CheckEquals(FUniqueList[0], 'Item0');
  CheckEquals(FUniqueList[1], 'Item1');
  CheckEquals(FUniqueList[2], 'Item2');
  CheckEquals(FUniqueList[3], 'Item4');
end;

procedure TestTUniqueList.TestDelete;
var
  i: Integer;
begin
  for i := 0 to 4 do
    FUniqueList.Add('Item' + IntToStr(I));

  FUniqueList.Delete(3);

  CheckEquals(FUniqueList.Count, 4);
  CheckEquals(FUniqueList.Contains('Item3'), False);

  CheckEquals(FUniqueList[0], 'Item0');
  CheckEquals(FUniqueList[1], 'Item1');
  CheckEquals(FUniqueList[2], 'Item2');
  CheckEquals(FUniqueList[3], 'Item4');
end;

procedure TestTUniqueList.TestSwap;
var
  i: Integer;
begin
  for i := 0 to 4 do
    FUniqueList.Add('Item' + IntToStr(I));

  FUniqueList.Swap(2, 3);

  CheckEquals(FUniqueList[0], 'Item0');
  CheckEquals(FUniqueList[1], 'Item1');
  CheckEquals(FUniqueList[2], 'Item3');
  CheckEquals(FUniqueList[3], 'Item2');
  CheckEquals(FUniqueList[4], 'Item4');
end;

procedure TestTUniqueList.TestSwap1;
var
  i: Integer;
begin
  for i := 0 to 4 do
    FUniqueList.Add('Item' + IntToStr(I));

  FUniqueList.Swap('Item3', 'Item2');

  CheckEquals(FUniqueList[0], 'Item0');
  CheckEquals(FUniqueList[1], 'Item1');
  CheckEquals(FUniqueList[2], 'Item3');
  CheckEquals(FUniqueList[3], 'Item2');
  CheckEquals(FUniqueList[4], 'Item4');
end;

procedure TestTUniqueList.TestClear;
var
  i: Integer;
begin
  for i := 0 to 4 do
    FUniqueList.Add('Item' + IntToStr(I));

  FUniqueList.Clear;

  CheckEquals(FUniqueList.Count, 0);
end;

procedure TestTUniqueList.TestMove;
var
  i: Integer;
begin
  for i := 0 to 4 do
    FUniqueList.Add('Item' + IntToStr(I));

  FUniqueList.Move(3, 1);

  CheckEquals(FUniqueList[0], 'Item0');
  CheckEquals(FUniqueList[1], 'Item3');
  CheckEquals(FUniqueList[2], 'Item1');
  CheckEquals(FUniqueList[3], 'Item2');
  CheckEquals(FUniqueList[4], 'Item4');
end;

procedure TestTUniqueList.TestContains;
var
  i: Integer;
begin
  for i := 0 to 4 do
    FUniqueList.Add('Item' + IntToStr(I));

  FUniqueList.Delete(2);
  FUniqueList.Remove('Item3');

  CheckEquals(FUniqueList.Contains('Item0'), True);
  CheckEquals(FUniqueList.Contains('Item1'), True);
  CheckEquals(FUniqueList.Contains('Item2'), False);
  CheckEquals(FUniqueList.Contains('Item3'), False);
  CheckEquals(FUniqueList.Contains('Item4'), True);
  CheckEquals(FUniqueList.Contains('Item5'), False);
end;

procedure TestTUniqueList.TestIndexOf;
var
  i: Integer;
begin
  for i := 0 to 4 do
    FUniqueList.Add('Item' + IntToStr(I));

  FUniqueList.Swap(2, 3);

  CheckEquals(FUniqueList.IndexOf('Item0'), 0);
  CheckEquals(FUniqueList.IndexOf('Item1'), 1);
  CheckEquals(FUniqueList.IndexOf('Item2'), 3);
  CheckEquals(FUniqueList.IndexOf('Item3'), 2);
  CheckEquals(FUniqueList.IndexOf('Item4'), 4);
end;

procedure TestTUniqueList.TestCount;
var
  i: Integer;
begin
  for i := 0 to 4 do
    FUniqueList.Add('Item' + IntToStr(I));

  FUniqueList.Delete(3);

  CheckEquals(FUniqueList.Count, 4);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTUniqueList.Suite);
end.

